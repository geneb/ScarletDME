SUBROUTINE PRETTYJSON.SUB(JSON.IN, JSON)

* Pretty Print JSON text data with user defined indentation string.
* As per the JSON spec (json.org), strings are assumed double quoted and
* the escape character is a reverse solidus (aka backslash).

* BSD 2-Clause License
*
* Copyright (c) [2015], [Kevin Powick]
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
* 1. Redistributions of source code must retain the above copyright notice, this
*    list of conditions and the following disclaimer.
*
* 2. Redistributions in binary form must reproduce the above copyright notice,
*    this list of conditions and the following disclaimer in the documentation
*    and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

INDENT.COUNT = 0
INDENT.STR = '   '; * 3 spaces
NEWLINE = CHAR(13):CHAR(10)
QUOTED = 0
JSON = ''

MAXX = LEN(JSON.IN)
FOR I = 1 TO MAXX
   JC = JSON.IN[I,1]
   BEGIN CASE
      CASE JC = '{' OR JC = '['
         JSON := JC
         IF NOT(QUOTED) THEN
            JSON := NEWLINE
            INDENT.COUNT += 1
            JSON := STR(INDENT.STR,INDENT.COUNT)
         END

      CASE JC = '}' OR JC = ']'
         IF NOT(QUOTED) THEN
            JSON := NEWLINE
            INDENT.COUNT -= 1
            JSON := STR(INDENT.STR,INDENT.COUNT)
         END
         JSON := JC

      CASE JC = ','
         JSON := JC
         IF NOT(QUOTED) THEN
            JSON := NEWLINE
            JSON := STR(INDENT.STR,INDENT.COUNT)
         END

      CASE JC = ':'
         JSON := JC
         IF NOT(QUOTED) THEN JSON := ' '

      CASE JC = '"'
         JSON := JC
         ESCAPED = 0
         NDX = I
         LOOP
            NDX -= 1
         WHILE NDX > 0 AND JSON.IN[NDX,1] = '\' DO
            ESCAPED = NOT(ESCAPED)
         REPEAT
         IF NOT(ESCAPED) THEN QUOTED = NOT(QUOTED)

      CASE 1
         JSON := JC
   END CASE
NEXT I
RETURN
END

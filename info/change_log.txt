******************************************************************************
*            THIS CHANGE LOG ONLY APPLIES TO THE "DEV" BRANCH                *
******************************************************************************
03Sep25 -gwb
------------
I made a number of small changes due to issues discovered when compiling with
newer versions of gcc.  Many thanks to Lance Olson for bringing these to my
attention!

A number of buffer sizing issues were also address in relation to sprintf().

CodeQL has been configured to run on the dev branch, so we'll see how that works.

06Feb22 -gwb
------------
I ran ScarleDME through valgrind and discovered a few function calls that were
acting upon variables that had not been initialized.

When running ScarleDME via valgrind, I discovered that the "SH" problem doesn't
happen on systems that are normally affected by it.  This tells me that we may
have a Heisenbug on our hands.

Fixed the use of LONG_MIN in op_dec() (op_arith.c).  These should have been
changed to INT32_MIN when the original 64 bit conversion work was being done.

===============================================================================

27Jan22 -gwb
------------

The build was failing on macOS because the ioctl() call in lnxport.c resulted
in an error because sys/ioctl.h was not included.  Added #ifdef __APPLE__ to
fix that.

===============================================================================

14Jan22 -gwb
------------

There was an issue when trying to access the MESSAGES file from within ScarleDME.
Somehow after Diccon T. converted MESSAGES from a dynamic file to a directory file,
the dynamic file stores (~0 and ~1) were still present and it confused the hell
out of the system.  I've removed those from the MESSAGES directory and things
appear to be working well again.  It didn't affect how system programs read the
messages, only when trying to list or edit entries in the MESSAGES file.

I'm now putting misc things like TODO items research notes, etc. in a file called
info/notes.txt.

Most of the changes in tonight's commit are mostly cleanup as I did research into
the "SH" problem that some users have.  I'm no closer to understanding what the
precise issue is, but I've gained a greater understanding of how the system loads
pcode objects, which is an important step to understanding the landscape.

IMPORTANT NOTE:
I've noticed that compiling code under the 64 bit build results in larger binary
object files.  This is to be expected.  However, I do not think these larger
object files will function at all with the 32 bit build, so extreme care must
be taken to not contaminate the 32 bit object repository.  For this reason I may
end up having to create two different packages of installation files in order to
enforce that separation.

info/setup.txt got updated with more instructions - thanks Wol!

===============================================================================

12Jan22 -gwb
------------
Makefile fixes!

Fixed a typo that resulted in the $IPC directory being a mess and 
not having the dynamic files it needed.
Cleaned up the datafiles installation process to make sure the things
that needed to get copied were.
Ensured correct permissions were being correctly set for the all the 
files within the subdirectories of the installation location.
Incorrect permissions were causing issues with creating an account on
the very first login to the system.
===============================================================================

11Jan22 - gwb 
-------------
Updates (in no particular order):
It was discovered after I fixed an issue with the .gitignore file that we had
a binary blob laying around that nobody was aware of!  It's called "pcode" and
contains...pcode.  I think. :)  In fixing the .gitignore file to make sure that
nothing from the bin directory got pushed to github, we lost that binary blob.
This was discovered by Don M. when he tried building & installing from the dev
branch this evening.  I made a quick fix and got the pcode file restored, so 
others won't have this same issue.

Unfortunately, the pcode file represents something we can't build from "source"
at this time, so I'll have to work out precisely what's in it and reverse engineer
it so that it can be re-created or expanded at will.  This is going to take some
time, so it won't happen overnight.  The pcode file is loaded into the sysmesg
structure when the bind_sysseg() call (in sysseg.c) is made, and it's parsed out
in qm.c via the Pcode() macro - I left a pretty comprehensive explanation of 
how the macro works there, so you might want to check it out.  It's a pretty clever
way of processing a dynamic list of things as well as a way to create variables
that reference them.

Github offers a static code analysis tool called CodeQL that can be leveraged to
find problems in your code.  I've got CodeQL enabled on the dev branch and it
kicks off with each push to the repo.  It's very good at finding bad things to fix.
I'll work through the issues it finds as I have time.  I've created a number of
issues based on its output already.

Closed git Issues 12, 15-17.

===============================================================================
10Jan22 - gwb
-------------
All of the format specifier warnings for *printf()/sscanf() have been resolved
for the 64 bit build.  One remains in the 32 bit build in analyse.c and because 
of the length of the code question, I didn't want to add an #ifndef __LP64__ to it.

I've also resolved all of the warnings related to casting.  This work, in conjunction
with the format specifier warning cleanup now results in a fully working 64 bit build!
The issues noted in the 28Feb20 update no longer appear to be present.  The Basic
compiler appears to function normally.  One of the tests I performed was to compile
the Basic compiler with itself and then compile itself again.  No errors were indicated
and it appears to be working the same as it does when ScarletDME is built as a 32 bit
application.  A full suite of regression tests really should be created in order to 
ensure that there's no behavior differences between the 32 bit and 64 bit builds.

It's now easier to build the 64 bit target - simply change the BUILD64 define to Y
in the makefile.
The makefile will now announce what target it's building for.
===============================================================================

09Jan22 - gwb
-------------
Changed the STRING_CHUNK struct to align on a 2 byte boundary.  A warning
was being triggered due to a cast from DH_RECORD, which uses a 2 byte boundary,
to STRING_CHUNK which was not explicitly aligned, resulting it defaulting to an 8
byte boundary.
===============================================================================

08Jan22 - gwb
-------------
Added created the $COMO directory and added it to the list of things to be 
copied during "make install".
This was done to prevent an error #3003 from being displayed by LISTF if 
the $COMO file didn't exist.  Thanks to Don M. for this one as well.
===============================================================================

07Jan22 - gwb
-------------
Made the following changes based on suggestions by Donald Montaine:
1. Created the missing $FORMS directory and updated the Makefile to 
   include it when "make install" is executed.

2. The default qmconfig file has been renamed to as "scarlet.conf" (overlooked 
   during the rebranding))

3. Created a new default configuration file (scarlet.conf).
   The new file contains the following configuration:
   [qm]
   QMSYS=/usr/qmsys
   GRPSIZE=2
   NUMUSERS=10
   SORTMEM=4096

   QMSYS is the location of the QMSYS account directory.  ScarletDME won't function
   properly if this location is incorrect.

   GRPSIZE is the default group size in 1024 byte units.  This value is used when
   creating a dynamic file.  The value given must be in the range of 1 to 8.
   It's advised that you set this to a multiple of your operating system's disk block
   size.  The default block size on Linux is 4096 bytes, MacOS can be either 512 bytes
   or 4096 bytes.

   NUMUSERS sets the number of simultaneous users that can use ScarletDME at one time.
   It may also control buffer allocations on the server side. (code that examines the
   variable "max_users" is directly related to the NUMUSERS value)

   SORTMEM This is the size in kilobytes where the system switches from a RAM based sort
   to a disk based sort. If this isn't specified, it'll default to 1024(1MB).


Updated .gitignore to add additional files to ignore.

Moved this file and other text files into the "info" directory.
===============================================================================

30May20 -Simon Kissane
----------------------
Added support for building on macOS Mojave.

Note I haven't confirmed it actually works on macOS, just that it
builds successfully.

Note that on macOS this builds 64-bit instead of 32-bit. In macOS
Catalina, support for running 32-bit programs has been removed. I am
still on Mojave, but while Mojave can still run 32-bit programs, it has
problems with building them. Due to both of those reasons, I made the
macOS build default to 64-bit. (I didn't change the 32-bit default on
Linux).

I tested the build on Linux as well (Ubuntu), and it built successfully,
so I conclude my changes for macOS have not broken the Linux build.
===============================================================================

30May20 -Simon Kissane
----------------------
Add Dockerfile for building/running ScarletDME under Docker

Usage:

./docker/run

At root@XXXXXXXXXXXX:/usr/qmsys# prompt, run:
   ./bin/qm -start
   ./bin/qm

This is useful for people who run macOS who want an easy way of
building/running 32-bit Linux ScarletDME under Docker for Mac. (It could
also be useful for people who run Linux but may not have the right
development packages installed - the Dockerfile installs the necessary
packages automatically.)
===============================================================================

06Mar20 -gwb
--------------
Fixed a couple of more warnings that are triggered for the 64 bit build.
Fixed service naming issues in the xinetd configuration files.
===============================================================================

05Mar20 -gwb
Fixed an implict declaration warning, but forgot to note it here.
===============================================================================

28Feb20, 29Feb20 -gwb
---------------------
ScarletDME now builds as a 64 bit application without error and will properly
start.  I'm currently chasing down compiler warnings that point out issues that
keep the db from operating fully.  

Converting to architecture independent variable types is only half the battle.
Any instances of things like LONG_MAX also have to be changed to their 
architecture independant equivalents like INT32_MAX.

Note that as of right now, the code will compile completely for the most part, 
but you will NOT have a fully functional system.

Issues I've hit:
The QMBasic compiler throwing errors on things that are most certainly NOT 
errors ("Duplicate label" - there's no labels in the test program!

QMBasic compiler throwing a "Numeric overflow" error during the compile of 
the test program.  The error is being thrown in the k_get_int() function in 
k_funcs.c.  It's happening in the "FLOATNUM" case where the absolute value of 
p->data.float_number is being checked to see if it's greater than INT32_MAX.
The problem is that data.float_number is some how being assigned to what
amounts to UINT32_MAX, so the test fails and an error is generated.
This test originally compared to LONG_MAX, but LONG_MAX becomes a 64 bit value
when you compile as a 64 bit application.

Disk accesses via reads will eventually cause a group lock that is never
unlocked.  The session will hang.  If you run "qm -dump", the bottom section
shows group locks:

=== GROUP LOCK TABLE ===
Max locks = 30, Count = 1474, Wait = 1, Retry = 57154, Scan = 1.0
GLid  Ct Hash User Fno Tp Group    GrpCt
  1  69   0   1   1 GR 00000001     0

The Retry field will continue to increase until you finally kill the process.
I had originally thought this issue was related to the LONG_MAX vs INT32_MAX
problem, but the eventual group lock hang continues to happen.  Prior to
the LONG_MAX change it would happen fairly quickly into the session.  After 
the group lock hang may happen early into the session or some minutes into it.
It took me quite a while to get it to hang so I could provide the above output
example.

I had to turn off the -Wformat warning in the build due to the compiler warnings
that were being thrown due to the conversion to int??_t & u_int??_t types.
These only appear in various sprintf(), printf(), fprintf(), and snprintf()
calls.  I have not done the research required to know wether or not these
warnings can continue to be ignored.

When building as a 64 bit application (comment out "-m32" in the makefile) you
will see some pointer cast warnings.  They're not triggered in the 32 bit build
and my C-fu isn't quite up to properly resolving them yet.

There is also an issue regarding terminal emulation - with my CentOS 8 system,
I can start ScarletDME and enter "TERM LINUX" and it sets up properly.
However, on My Raspberry Pi 3 (Current Raspbian) and my CentOS 7 system,
"TERM LINUX" results in "Unrecognized terminal name".  Not sure why yet, but 
it's something you should be aware of.

===============================================================================
27Feb20 - gwb
-------------
Did a bit of "rebranding" work.  A few instances of "QM" have been changed to
"ScarletDME" in the program source code.
Messages 1758, 3516, 5009, 5163, 6090, PL1758, PL3516, PL5009, PL5163, and
PL6090 were edited to change "QM" to "ScarletDME".

Notes added for Raspberry Pi users.
===============================================================================

26Feb20 - gwb
-------------
Eight. Years. Later....

The entire codebase was sifted through and all compiler warnings have been resolved.
The vast majority of the warnings were related to potential overflow problems
with sprintf() calls.  All the problematic calls were converted to snprintf() calls
and some minor error handling logic was added.  The error handling needs more work
to be actually beneficial.  (a grep for "TODO" will find most of these)

The remainder of the compiler warnings were triggered by variables that were declared
and set, but were never used after that point.  This items are marked by comments
and should be reviewed to see if they're part of functionality that was partially
removed (and mayhap could be restored) or just dead code that could safely be
ignored.

ScarletDME is currently building and working without error on CentOS 8.
See README.md for details on how to configure the build environment.

Some (not all!) K&R style function declarations have been converted to ANSI style.
Each source file that was edited has been reformatted for readiblity.  See the main
README.md file on guidelines for that.

A bug was found in op_config.c that would have prevented the successful parsing of the
"SH" and "SH1" configuration options.  See op_config.c for more info.

===============================================================================

20Jun12 - gwb
-------------
Fixed a compiler warning in k_error() - caused by an sprintf() call missing a format specifier.
Added link flags to the Makefile in order to support proper linking under Ubuntu 12.04 LTS
Added install and datafiles targets to the Makefile.
The install target will copy the results of the build action to $(INSTROOT)/bin which is currently
/usr/qmsys/bin.
The datafiles target will copy the system data files to $(INSTROOT) and set permissions on the required
files.  THIS WILL WIPE OUT AN EXISTING INSTALLATION!	

===============================================================================

07Aug09 - dat
-------------
Rewrote messages.c : sysmesg() to utilise a directory file version of MESSAGES instead of
a Dynamic file version. Fairly substantial changes in code, but the logic was
duplicated.
Also, obviously, changed MESSAGES into a directory file.

===============================================================================

06Aug09 - dat
-------------
Changes MESSAGES 1407 from:
  Error %d (o/s %d) writing record
to
  Error %d (o/s %d) writing record (Possible full disk?)
To provide a useful hint in the event the disk fills up.

===============================================================================

23Apr09 - gcb
-------------
Rewrote the DICT.TOOLS.CLS to cache dictionary and item data for efficiency.
Added a non-sort dictionary list get method and renamed the sorted list method.
Renamed the filename method to set.file.name and itemid to set.item.id.

===============================================================================

22Apr09 - gcb
-------------
Added GPL.BP DICT.TOOLS.CLS QMOO class for reading data from a file using dictionaries. There are also methods for getting the dict list, dict count, item-sselect, and item-sselect count. This is preliminary code and needs more work to be more stable and fully featured.

===============================================================================

14Apr09 - gcb
-------------
Added missing @FILENAME synonym for @FILE.NAME to ICOMP and BCOMP.

Added code to _SUM and _SUMALL to summarize only numeric values in the array being passed to the function.

===============================================================================

13Apr09 - gwb
Added TEST account to the workdevbranch1 tree.  This account should be the
home of any test programs or procs that excercise new features.

You can add the TEST account by logging to QMSYS and creating a new entry
in the ACCOUNTS file called "TEST".  Line #1 should look like this:

/<your pathname>/openqm/branches/workdevbranch1/TEST

File it and then run UPDATE.ACCOUNT.  You should then be able to log to the
TEST account without any problems.

===============================================================================

10Apr09 - gcb
-------------
Added SKT$INFO.FAMILY option for SOCKET.INFO to retrieve address family for INET type sockets. 
Return values are SKT$INFO.FAMILY.IPV4 or SKT$INFO.FAMILY.IPV6. 

Added socket option to op_srvrskt() in op_skt.c to enable SO_REUSEADDR. This will allow 
rebinding to address/ports in TIME_WAIT state.

================================================================================

10Apr09 - gwb
-------------
A segfault generating bug was triggered when calling OPEN.SOCKET or
CREATE.SERVER.SOCKET with a malformed ip address.  The routine was correctly
handling the error, but the error check didn't encapsulate to the freeaddrinfo()
call which was attempting to free a null pointer.  (getaddrinfo() failed
properly and never filled out the struct that freeaddrinfo() was trying to
free.

As a result of this, the bug was quashed (thanks for finding it Glen!) and I
greatly increased the ability of the code to detect malformed ip address of
either IPv4 or IPv6.

A new error constant was added (ER_BADADDR), so you should re-run ERRGEN to
update the QMBasic error codes file.

================================================================================
09Apr09 - gwb
-------------
In op_skt.c the routines op_openskt(), op_acceptskt(), op_srvrsck()
and op_srvraddr() have been re-written to incorporate newer network
access methodologies.  This includes the ability to transparently
access both IPv4 and IPv6 network features.

In order to keep error constants that live in SYSCOM up to date, 
you'll need to run "ERRGEN" from GPL.BP to pick up the changes
made to err.h in the C source tree.

ERRGEN has also been updated to incorporate changes that actually
allow it to do it's job.  The original GPL source drop included a 
version of ERRGEN that wasn't updated to work with the new GPL.BP
source tree.  This has been fixed.

You'll need to create a pointer called "CSRC" in order to allow
ERRGEN to access the err.h file that's included in the gplsrc directory.
The VOC entry looks like this:

F
/path/to/your/source/tree

=============================================================================

